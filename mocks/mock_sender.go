// Code generated by MockGen. DO NOT EDIT.
// Source: sender.go
//
// Generated by this command:
//
//	mockgen -source=sender.go -destination=../../../mocks/mock_sender.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/vladimish/talk/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSender is a mock of Sender interface.
type MockSender struct {
	ctrl     *gomock.Controller
	recorder *MockSenderMockRecorder
}

// MockSenderMockRecorder is the mock recorder for MockSender.
type MockSenderMockRecorder struct {
	mock *MockSender
}

// NewMockSender creates a new mock instance.
func NewMockSender(ctrl *gomock.Controller) *MockSender {
	mock := &MockSender{ctrl: ctrl}
	mock.recorder = &MockSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSender) EXPECT() *MockSenderMockRecorder {
	return m.recorder
}

// AnswerPreCheckoutQuery mocks base method.
func (m *MockSender) AnswerPreCheckoutQuery(ctx context.Context, preCheckoutQueryID string, ok bool, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerPreCheckoutQuery", ctx, preCheckoutQueryID, ok, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// AnswerPreCheckoutQuery indicates an expected call of AnswerPreCheckoutQuery.
func (mr *MockSenderMockRecorder) AnswerPreCheckoutQuery(ctx, preCheckoutQueryID, ok, errorMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerPreCheckoutQuery", reflect.TypeOf((*MockSender)(nil).AnswerPreCheckoutQuery), ctx, preCheckoutQueryID, ok, errorMessage)
}

// CreateInvoiceLink mocks base method.
func (m *MockSender) CreateInvoiceLink(ctx context.Context, params domain.CreateInvoiceLinkParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInvoiceLink", ctx, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInvoiceLink indicates an expected call of CreateInvoiceLink.
func (mr *MockSenderMockRecorder) CreateInvoiceLink(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInvoiceLink", reflect.TypeOf((*MockSender)(nil).CreateInvoiceLink), ctx, params)
}

// DeleteMessage mocks base method.
func (m *MockSender) DeleteMessage(ctx context.Context, externalUserID, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", ctx, externalUserID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockSenderMockRecorder) DeleteMessage(ctx, externalUserID, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockSender)(nil).DeleteMessage), ctx, externalUserID, messageID)
}

// SendMessage mocks base method.
func (m *MockSender) SendMessage(ctx context.Context, externalUserID, text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, externalUserID, text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockSenderMockRecorder) SendMessage(ctx, externalUserID, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSender)(nil).SendMessage), ctx, externalUserID, text)
}

// SendMessageWithContent mocks base method.
func (m *MockSender) SendMessageWithContent(ctx context.Context, externalUserID string, content domain.MessageContent) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessageWithContent", ctx, externalUserID, content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessageWithContent indicates an expected call of SendMessageWithContent.
func (mr *MockSenderMockRecorder) SendMessageWithContent(ctx, externalUserID, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageWithContent", reflect.TypeOf((*MockSender)(nil).SendMessageWithContent), ctx, externalUserID, content)
}

// SendTyping mocks base method.
func (m *MockSender) SendTyping(ctx context.Context, externalUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTyping", ctx, externalUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTyping indicates an expected call of SendTyping.
func (mr *MockSenderMockRecorder) SendTyping(ctx, externalUserID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTyping", reflect.TypeOf((*MockSender)(nil).SendTyping), ctx, externalUserID)
}

// UpdateMessage mocks base method.
func (m *MockSender) UpdateMessage(ctx context.Context, externalUserID, messageID, text string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", ctx, externalUserID, messageID, text)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockSenderMockRecorder) UpdateMessage(ctx, externalUserID, messageID, text any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockSender)(nil).UpdateMessage), ctx, externalUserID, messageID, text)
}

// UpdateMessages mocks base method.
func (m *MockSender) UpdateMessages(ctx context.Context, externalUserID string, messageIDs []string, previousText, currentText string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessages", ctx, externalUserID, messageIDs, previousText, currentText)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessages indicates an expected call of UpdateMessages.
func (mr *MockSenderMockRecorder) UpdateMessages(ctx, externalUserID, messageIDs, previousText, currentText any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessages", reflect.TypeOf((*MockSender)(nil).UpdateMessages), ctx, externalUserID, messageIDs, previousText, currentText)
}
