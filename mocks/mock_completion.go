// Code generated by MockGen. DO NOT EDIT.
// Source: completion.go
//
// Generated by this command:
//
//	mockgen -source=completion.go -destination=../../../mocks/mock_completion.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/vladimish/talk/internal/domain"
	completion "github.com/vladimish/talk/internal/port/completion"
	gomock "go.uber.org/mock/gomock"
)

// MockCompletion is a mock of Completion interface.
type MockCompletion struct {
	ctrl     *gomock.Controller
	recorder *MockCompletionMockRecorder
}

// MockCompletionMockRecorder is the mock recorder for MockCompletion.
type MockCompletionMockRecorder struct {
	mock *MockCompletion
}

// NewMockCompletion creates a new mock instance.
func NewMockCompletion(ctrl *gomock.Controller) *MockCompletion {
	mock := &MockCompletion{ctrl: ctrl}
	mock.recorder = &MockCompletionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompletion) EXPECT() *MockCompletionMockRecorder {
	return m.recorder
}

// CompleteStream mocks base method.
func (m *MockCompletion) CompleteStream(ctx context.Context, model, systemPrompt string, messages []*domain.Message, currentImageURL string) (<-chan completion.StreamToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteStream", ctx, model, systemPrompt, messages, currentImageURL)
	ret0, _ := ret[0].(<-chan completion.StreamToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteStream indicates an expected call of CompleteStream.
func (mr *MockCompletionMockRecorder) CompleteStream(ctx, model, systemPrompt, messages, currentImageURL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteStream", reflect.TypeOf((*MockCompletion)(nil).CompleteStream), ctx, model, systemPrompt, messages, currentImageURL)
}
