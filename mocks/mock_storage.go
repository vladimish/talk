// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=../../../mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/vladimish/talk/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateAttachment mocks base method.
func (m *MockStorage) CreateAttachment(ctx context.Context, attachment *domain.Attachment) (*domain.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttachment", ctx, attachment)
	ret0, _ := ret[0].(*domain.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttachment indicates an expected call of CreateAttachment.
func (mr *MockStorageMockRecorder) CreateAttachment(ctx, attachment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockStorage)(nil).CreateAttachment), ctx, attachment)
}

// CreateConversation mocks base method.
func (m *MockStorage) CreateConversation(ctx context.Context, conversation *domain.Conversation) (*domain.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConversation", ctx, conversation)
	ret0, _ := ret[0].(*domain.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversation indicates an expected call of CreateConversation.
func (mr *MockStorageMockRecorder) CreateConversation(ctx, conversation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversation", reflect.TypeOf((*MockStorage)(nil).CreateConversation), ctx, conversation)
}

// CreateForeignMessage mocks base method.
func (m *MockStorage) CreateForeignMessage(ctx context.Context, messageID, foreignMessageID int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForeignMessage", ctx, messageID, foreignMessageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateForeignMessage indicates an expected call of CreateForeignMessage.
func (mr *MockStorageMockRecorder) CreateForeignMessage(ctx, messageID, foreignMessageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForeignMessage", reflect.TypeOf((*MockStorage)(nil).CreateForeignMessage), ctx, messageID, foreignMessageID)
}

// CreateMessage mocks base method.
func (m *MockStorage) CreateMessage(ctx context.Context, message *domain.Message) (*domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, message)
	ret0, _ := ret[0].(*domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockStorageMockRecorder) CreateMessage(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockStorage)(nil).CreateMessage), ctx, message)
}

// CreatePayment mocks base method.
func (m *MockStorage) CreatePayment(ctx context.Context, payment *domain.Payment) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, payment)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockStorageMockRecorder) CreatePayment(ctx, payment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockStorage)(nil).CreatePayment), ctx, payment)
}

// CreateSubscription mocks base method.
func (m *MockStorage) CreateSubscription(ctx context.Context, subscription *domain.Subscription) (*domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, subscription)
	ret0, _ := ret[0].(*domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockStorageMockRecorder) CreateSubscription(ctx, subscription any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockStorage)(nil).CreateSubscription), ctx, subscription)
}

// CreateTransaction mocks base method.
func (m *MockStorage) CreateTransaction(ctx context.Context, transaction *domain.Transaction) (*domain.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", ctx, transaction)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStorageMockRecorder) CreateTransaction(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStorage)(nil).CreateTransaction), ctx, transaction)
}

// CreateUser mocks base method.
func (m *MockStorage) CreateUser(ctx context.Context, user *domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorage)(nil).CreateUser), ctx, user)
}

// GetActiveSubscriptionByUserID mocks base method.
func (m *MockStorage) GetActiveSubscriptionByUserID(ctx context.Context, userID int64) (*domain.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveSubscriptionByUserID", ctx, userID)
	ret0, _ := ret[0].(*domain.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveSubscriptionByUserID indicates an expected call of GetActiveSubscriptionByUserID.
func (mr *MockStorageMockRecorder) GetActiveSubscriptionByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveSubscriptionByUserID", reflect.TypeOf((*MockStorage)(nil).GetActiveSubscriptionByUserID), ctx, userID)
}

// GetConversationByID mocks base method.
func (m *MockStorage) GetConversationByID(ctx context.Context, conversationID int64) (*domain.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationByID", ctx, conversationID)
	ret0, _ := ret[0].(*domain.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationByID indicates an expected call of GetConversationByID.
func (mr *MockStorageMockRecorder) GetConversationByID(ctx, conversationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationByID", reflect.TypeOf((*MockStorage)(nil).GetConversationByID), ctx, conversationID)
}

// GetConversationsByUserID mocks base method.
func (m *MockStorage) GetConversationsByUserID(ctx context.Context, userID int64) ([]*domain.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationsByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationsByUserID indicates an expected call of GetConversationsByUserID.
func (mr *MockStorageMockRecorder) GetConversationsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationsByUserID", reflect.TypeOf((*MockStorage)(nil).GetConversationsByUserID), ctx, userID)
}

// GetForeignMessageByMessageID mocks base method.
func (m *MockStorage) GetForeignMessageByMessageID(ctx context.Context, messageID int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForeignMessageByMessageID", ctx, messageID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForeignMessageByMessageID indicates an expected call of GetForeignMessageByMessageID.
func (mr *MockStorageMockRecorder) GetForeignMessageByMessageID(ctx, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForeignMessageByMessageID", reflect.TypeOf((*MockStorage)(nil).GetForeignMessageByMessageID), ctx, messageID)
}

// GetLatestMessageByConversationID mocks base method.
func (m *MockStorage) GetLatestMessageByConversationID(ctx context.Context, conversationID int64) (*domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestMessageByConversationID", ctx, conversationID)
	ret0, _ := ret[0].(*domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestMessageByConversationID indicates an expected call of GetLatestMessageByConversationID.
func (mr *MockStorageMockRecorder) GetLatestMessageByConversationID(ctx, conversationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestMessageByConversationID", reflect.TypeOf((*MockStorage)(nil).GetLatestMessageByConversationID), ctx, conversationID)
}

// GetMessagesByConversationID mocks base method.
func (m *MockStorage) GetMessagesByConversationID(ctx context.Context, conversationID int64) ([]*domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByConversationID", ctx, conversationID)
	ret0, _ := ret[0].([]*domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByConversationID indicates an expected call of GetMessagesByConversationID.
func (mr *MockStorageMockRecorder) GetMessagesByConversationID(ctx, conversationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByConversationID", reflect.TypeOf((*MockStorage)(nil).GetMessagesByConversationID), ctx, conversationID)
}

// GetMessagesByUserID mocks base method.
func (m *MockStorage) GetMessagesByUserID(ctx context.Context, userID int64) ([]*domain.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByUserID", ctx, userID)
	ret0, _ := ret[0].([]*domain.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByUserID indicates an expected call of GetMessagesByUserID.
func (mr *MockStorageMockRecorder) GetMessagesByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByUserID", reflect.TypeOf((*MockStorage)(nil).GetMessagesByUserID), ctx, userID)
}

// GetPaymentByInvoicePayload mocks base method.
func (m *MockStorage) GetPaymentByInvoicePayload(ctx context.Context, invoicePayload string) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentByInvoicePayload", ctx, invoicePayload)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentByInvoicePayload indicates an expected call of GetPaymentByInvoicePayload.
func (mr *MockStorageMockRecorder) GetPaymentByInvoicePayload(ctx, invoicePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentByInvoicePayload", reflect.TypeOf((*MockStorage)(nil).GetPaymentByInvoicePayload), ctx, invoicePayload)
}

// GetUserByExternalUserID mocks base method.
func (m *MockStorage) GetUserByExternalUserID(ctx context.Context, id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByExternalUserID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByExternalUserID indicates an expected call of GetUserByExternalUserID.
func (mr *MockStorageMockRecorder) GetUserByExternalUserID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByExternalUserID", reflect.TypeOf((*MockStorage)(nil).GetUserByExternalUserID), ctx, id)
}

// GetUserTokenBalance mocks base method.
func (m *MockStorage) GetUserTokenBalance(ctx context.Context, userID int64) (*domain.TokenBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTokenBalance", ctx, userID)
	ret0, _ := ret[0].(*domain.TokenBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTokenBalance indicates an expected call of GetUserTokenBalance.
func (mr *MockStorageMockRecorder) GetUserTokenBalance(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTokenBalance", reflect.TypeOf((*MockStorage)(nil).GetUserTokenBalance), ctx, userID)
}

// GetUserTokenBalanceByType mocks base method.
func (m *MockStorage) GetUserTokenBalanceByType(ctx context.Context, userID int64, tokenType domain.TokenType) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTokenBalanceByType", ctx, userID, tokenType)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTokenBalanceByType indicates an expected call of GetUserTokenBalanceByType.
func (mr *MockStorageMockRecorder) GetUserTokenBalanceByType(ctx, userID, tokenType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTokenBalanceByType", reflect.TypeOf((*MockStorage)(nil).GetUserTokenBalanceByType), ctx, userID, tokenType)
}

// UpdateConversationName mocks base method.
func (m *MockStorage) UpdateConversationName(ctx context.Context, conversationID int64, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConversationName", ctx, conversationID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConversationName indicates an expected call of UpdateConversationName.
func (mr *MockStorageMockRecorder) UpdateConversationName(ctx, conversationID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConversationName", reflect.TypeOf((*MockStorage)(nil).UpdateConversationName), ctx, conversationID, name)
}

// UpdatePaymentStatus mocks base method.
func (m *MockStorage) UpdatePaymentStatus(ctx context.Context, paymentID int64, status domain.PaymentStatus, telegramChargeID, providerChargeID *string) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentStatus", ctx, paymentID, status, telegramChargeID, providerChargeID)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentStatus indicates an expected call of UpdatePaymentStatus.
func (mr *MockStorageMockRecorder) UpdatePaymentStatus(ctx, paymentID, status, telegramChargeID, providerChargeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentStatus", reflect.TypeOf((*MockStorage)(nil).UpdatePaymentStatus), ctx, paymentID, status, telegramChargeID, providerChargeID)
}

// UpdatePaymentWithInvoice mocks base method.
func (m *MockStorage) UpdatePaymentWithInvoice(ctx context.Context, paymentID int64, invoiceLink, invoicePayload, messageID string) (*domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentWithInvoice", ctx, paymentID, invoiceLink, invoicePayload, messageID)
	ret0, _ := ret[0].(*domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentWithInvoice indicates an expected call of UpdatePaymentWithInvoice.
func (mr *MockStorageMockRecorder) UpdatePaymentWithInvoice(ctx, paymentID, invoiceLink, invoicePayload, messageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentWithInvoice", reflect.TypeOf((*MockStorage)(nil).UpdatePaymentWithInvoice), ctx, paymentID, invoiceLink, invoicePayload, messageID)
}

// UpdateUserConversationListOffset mocks base method.
func (m *MockStorage) UpdateUserConversationListOffset(ctx context.Context, userID int64, offset int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserConversationListOffset", ctx, userID, offset)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserConversationListOffset indicates an expected call of UpdateUserConversationListOffset.
func (mr *MockStorageMockRecorder) UpdateUserConversationListOffset(ctx, userID, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserConversationListOffset", reflect.TypeOf((*MockStorage)(nil).UpdateUserConversationListOffset), ctx, userID, offset)
}

// UpdateUserCurrentConversationID mocks base method.
func (m *MockStorage) UpdateUserCurrentConversationID(ctx context.Context, userID int64, conversationID *int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCurrentConversationID", ctx, userID, conversationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCurrentConversationID indicates an expected call of UpdateUserCurrentConversationID.
func (mr *MockStorageMockRecorder) UpdateUserCurrentConversationID(ctx, userID, conversationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCurrentConversationID", reflect.TypeOf((*MockStorage)(nil).UpdateUserCurrentConversationID), ctx, userID, conversationID)
}

// UpdateUserCurrentStep mocks base method.
func (m *MockStorage) UpdateUserCurrentStep(ctx context.Context, userID int64, currentStep string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCurrentStep", ctx, userID, currentStep)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCurrentStep indicates an expected call of UpdateUserCurrentStep.
func (mr *MockStorageMockRecorder) UpdateUserCurrentStep(ctx, userID, currentStep any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCurrentStep", reflect.TypeOf((*MockStorage)(nil).UpdateUserCurrentStep), ctx, userID, currentStep)
}

// UpdateUserLanguage mocks base method.
func (m *MockStorage) UpdateUserLanguage(ctx context.Context, userID int64, language string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserLanguage", ctx, userID, language)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserLanguage indicates an expected call of UpdateUserLanguage.
func (mr *MockStorageMockRecorder) UpdateUserLanguage(ctx, userID, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserLanguage", reflect.TypeOf((*MockStorage)(nil).UpdateUserLanguage), ctx, userID, language)
}

// UpdateUserSelectedModel mocks base method.
func (m *MockStorage) UpdateUserSelectedModel(ctx context.Context, userID int64, selectedModel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSelectedModel", ctx, userID, selectedModel)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSelectedModel indicates an expected call of UpdateUserSelectedModel.
func (mr *MockStorageMockRecorder) UpdateUserSelectedModel(ctx, userID, selectedModel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSelectedModel", reflect.TypeOf((*MockStorage)(nil).UpdateUserSelectedModel), ctx, userID, selectedModel)
}

// UpdateUserWebSearchEnabled mocks base method.
func (m *MockStorage) UpdateUserWebSearchEnabled(ctx context.Context, userID int64, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserWebSearchEnabled", ctx, userID, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserWebSearchEnabled indicates an expected call of UpdateUserWebSearchEnabled.
func (mr *MockStorageMockRecorder) UpdateUserWebSearchEnabled(ctx, userID, enabled any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWebSearchEnabled", reflect.TypeOf((*MockStorage)(nil).UpdateUserWebSearchEnabled), ctx, userID, enabled)
}
