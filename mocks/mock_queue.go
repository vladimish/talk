// Code generated by MockGen. DO NOT EDIT.
// Source: queue.go
//
// Generated by this command:
//
//	mockgen -source=queue.go -destination=../../../mocks/mock_queue.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "github.com/vladimish/talk/internal/domain"
	queue "github.com/vladimish/talk/internal/port/queue"
	gomock "go.uber.org/mock/gomock"
)

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// ClearProcessing mocks base method.
func (m *MockQueue) ClearProcessing(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearProcessing", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearProcessing indicates an expected call of ClearProcessing.
func (mr *MockQueueMockRecorder) ClearProcessing(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearProcessing", reflect.TypeOf((*MockQueue)(nil).ClearProcessing), ctx, userID)
}

// DequeueWithMetadata mocks base method.
func (m *MockQueue) DequeueWithMetadata(ctx context.Context, userID string) (*queue.QueuedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DequeueWithMetadata", ctx, userID)
	ret0, _ := ret[0].(*queue.QueuedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DequeueWithMetadata indicates an expected call of DequeueWithMetadata.
func (mr *MockQueueMockRecorder) DequeueWithMetadata(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DequeueWithMetadata", reflect.TypeOf((*MockQueue)(nil).DequeueWithMetadata), ctx, userID)
}

// EnqueueWithNotification mocks base method.
func (m *MockQueue) EnqueueWithNotification(ctx context.Context, userID string, update domain.Update, notificationID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueWithNotification", ctx, userID, update, notificationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueWithNotification indicates an expected call of EnqueueWithNotification.
func (mr *MockQueueMockRecorder) EnqueueWithNotification(ctx, userID, update, notificationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueWithNotification", reflect.TypeOf((*MockQueue)(nil).EnqueueWithNotification), ctx, userID, update, notificationID)
}

// GetQueueLength mocks base method.
func (m *MockQueue) GetQueueLength(ctx context.Context, userID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueueLength", ctx, userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueueLength indicates an expected call of GetQueueLength.
func (mr *MockQueueMockRecorder) GetQueueLength(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueueLength", reflect.TypeOf((*MockQueue)(nil).GetQueueLength), ctx, userID)
}

// IsProcessing mocks base method.
func (m *MockQueue) IsProcessing(ctx context.Context, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProcessing", ctx, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProcessing indicates an expected call of IsProcessing.
func (mr *MockQueueMockRecorder) IsProcessing(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProcessing", reflect.TypeOf((*MockQueue)(nil).IsProcessing), ctx, userID)
}

// SetProcessing mocks base method.
func (m *MockQueue) SetProcessing(ctx context.Context, userID string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProcessing", ctx, userID, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProcessing indicates an expected call of SetProcessing.
func (mr *MockQueueMockRecorder) SetProcessing(ctx, userID, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProcessing", reflect.TypeOf((*MockQueue)(nil).SetProcessing), ctx, userID, ttl)
}
