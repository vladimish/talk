// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (foreign_id, language, current_step, selected_model, conversation_list_offset, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, foreign_id, language, created_at, updated_at, current_step, selected_model, current_conversation, conversation_list_offset
`

type CreateUserParams struct {
	ForeignID              int64
	Language               string
	CurrentStep            string
	SelectedModel          string
	ConversationListOffset int32
	CreatedAt              time.Time
	UpdatedAt              time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ForeignID,
		arg.Language,
		arg.CurrentStep,
		arg.SelectedModel,
		arg.ConversationListOffset,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ForeignID,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CurrentStep,
		&i.SelectedModel,
		&i.CurrentConversation,
		&i.ConversationListOffset,
	)
	return i, err
}

const getUserByForeignID = `-- name: GetUserByForeignID :one
SELECT id, foreign_id, language, created_at, updated_at, current_step, selected_model, current_conversation, conversation_list_offset
FROM users
WHERE foreign_id = $1
LIMIT 1
`

func (q *Queries) GetUserByForeignID(ctx context.Context, foreignID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByForeignID, foreignID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.ForeignID,
		&i.Language,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CurrentStep,
		&i.SelectedModel,
		&i.CurrentConversation,
		&i.ConversationListOffset,
	)
	return i, err
}

const updateUserConversationListOffset = `-- name: UpdateUserConversationListOffset :exec
UPDATE users
SET conversation_list_offset = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserConversationListOffsetParams struct {
	ID                     int64
	ConversationListOffset int32
}

func (q *Queries) UpdateUserConversationListOffset(ctx context.Context, arg UpdateUserConversationListOffsetParams) error {
	_, err := q.db.ExecContext(ctx, updateUserConversationListOffset, arg.ID, arg.ConversationListOffset)
	return err
}

const updateUserCurrentConversationID = `-- name: UpdateUserCurrentConversationID :exec
UPDATE users
SET current_conversation = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserCurrentConversationIDParams struct {
	ID                  int64
	CurrentConversation sql.NullInt64
}

func (q *Queries) UpdateUserCurrentConversationID(ctx context.Context, arg UpdateUserCurrentConversationIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserCurrentConversationID, arg.ID, arg.CurrentConversation)
	return err
}

const updateUserCurrentStep = `-- name: UpdateUserCurrentStep :exec
UPDATE users
SET current_step = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserCurrentStepParams struct {
	ID          int64
	CurrentStep string
}

func (q *Queries) UpdateUserCurrentStep(ctx context.Context, arg UpdateUserCurrentStepParams) error {
	_, err := q.db.ExecContext(ctx, updateUserCurrentStep, arg.ID, arg.CurrentStep)
	return err
}

const updateUserLanguage = `-- name: UpdateUserLanguage :exec
UPDATE users
SET language = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserLanguageParams struct {
	ID       int64
	Language string
}

func (q *Queries) UpdateUserLanguage(ctx context.Context, arg UpdateUserLanguageParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLanguage, arg.ID, arg.Language)
	return err
}

const updateUserSelectedModel = `-- name: UpdateUserSelectedModel :exec
UPDATE users
SET selected_model = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateUserSelectedModelParams struct {
	ID            int64
	SelectedModel string
}

func (q *Queries) UpdateUserSelectedModel(ctx context.Context, arg UpdateUserSelectedModelParams) error {
	_, err := q.db.ExecContext(ctx, updateUserSelectedModel, arg.ID, arg.SelectedModel)
	return err
}
