// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package generated

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
    message_type,
    user_id,
    sent_by,
    conversation
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, message_type, user_id, sent_by, created_at, updated_at, conversation
`

type CreateMessageParams struct {
	MessageType  json.RawMessage
	UserID       int64
	SentBy       MessageSender
	Conversation uuid.NullUUID
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.MessageType,
		arg.UserID,
		arg.SentBy,
		arg.Conversation,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.MessageType,
		&i.UserID,
		&i.SentBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Conversation,
	)
	return i, err
}

const getConversationsByUserID = `-- name: GetConversationsByUserID :many
SELECT DISTINCT conversation, MIN(created_at) as first_message_at
FROM messages
WHERE user_id = $1 AND conversation IS NOT NULL
GROUP BY conversation
ORDER BY first_message_at DESC
`

type GetConversationsByUserIDRow struct {
	Conversation   uuid.NullUUID
	FirstMessageAt interface{}
}

func (q *Queries) GetConversationsByUserID(ctx context.Context, userID int64) ([]GetConversationsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getConversationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetConversationsByUserIDRow
	for rows.Next() {
		var i GetConversationsByUserIDRow
		if err := rows.Scan(&i.Conversation, &i.FirstMessageAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByConversation = `-- name: GetMessagesByConversation :many
SELECT id, message_type, user_id, sent_by, created_at, updated_at, conversation FROM messages
WHERE conversation = $1
ORDER BY created_at ASC
`

func (q *Queries) GetMessagesByConversation(ctx context.Context, conversation uuid.NullUUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByConversation, conversation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.MessageType,
			&i.UserID,
			&i.SentBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Conversation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByUserID = `-- name: GetMessagesByUserID :many
SELECT id, message_type, user_id, sent_by, created_at, updated_at, conversation FROM messages
WHERE user_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetMessagesByUserID(ctx context.Context, userID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.MessageType,
			&i.UserID,
			&i.SentBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Conversation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
