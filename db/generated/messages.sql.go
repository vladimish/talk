// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: messages.sql

package generated

import (
	"context"
	"encoding/json"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (
    message_type,
    user_id,
    sent_by
) VALUES (
    $1, $2, $3
)
RETURNING id, message_type, user_id, sent_by, created_at, updated_at
`

type CreateMessageParams struct {
	MessageType json.RawMessage
	UserID      int64
	SentBy      MessageSender
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.MessageType, arg.UserID, arg.SentBy)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.MessageType,
		&i.UserID,
		&i.SentBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMessagesByUserID = `-- name: GetMessagesByUserID :many
SELECT id, message_type, user_id, sent_by, created_at, updated_at FROM messages
WHERE user_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetMessagesByUserID(ctx context.Context, userID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.MessageType,
			&i.UserID,
			&i.SentBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
