// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payments.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (user_id, invoice_link, currency, amount, subscription_type, invoice_payload)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, invoice_link, telegram_payment_charge_id, provider_payment_charge_id, currency, amount, status, subscription_type, invoice_payload, message_id, created_at, updated_at
`

type CreatePaymentParams struct {
	UserID           int64
	InvoiceLink      string
	Currency         string
	Amount           int64
	SubscriptionType string
	InvoicePayload   sql.NullString
}

type CreatePaymentRow struct {
	ID                      int64
	UserID                  int64
	InvoiceLink             string
	TelegramPaymentChargeID sql.NullString
	ProviderPaymentChargeID sql.NullString
	Currency                string
	Amount                  int64
	Status                  string
	SubscriptionType        string
	InvoicePayload          sql.NullString
	MessageID               sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (CreatePaymentRow, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.UserID,
		arg.InvoiceLink,
		arg.Currency,
		arg.Amount,
		arg.SubscriptionType,
		arg.InvoicePayload,
	)
	var i CreatePaymentRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InvoiceLink,
		&i.TelegramPaymentChargeID,
		&i.ProviderPaymentChargeID,
		&i.Currency,
		&i.Amount,
		&i.Status,
		&i.SubscriptionType,
		&i.InvoicePayload,
		&i.MessageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByID = `-- name: GetPaymentByID :one
SELECT id, user_id, invoice_link, telegram_payment_charge_id, provider_payment_charge_id, currency, amount, status, subscription_type, invoice_payload, message_id, created_at, updated_at
FROM payments 
WHERE id = $1
`

type GetPaymentByIDRow struct {
	ID                      int64
	UserID                  int64
	InvoiceLink             string
	TelegramPaymentChargeID sql.NullString
	ProviderPaymentChargeID sql.NullString
	Currency                string
	Amount                  int64
	Status                  string
	SubscriptionType        string
	InvoicePayload          sql.NullString
	MessageID               sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) GetPaymentByID(ctx context.Context, id int64) (GetPaymentByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByID, id)
	var i GetPaymentByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InvoiceLink,
		&i.TelegramPaymentChargeID,
		&i.ProviderPaymentChargeID,
		&i.Currency,
		&i.Amount,
		&i.Status,
		&i.SubscriptionType,
		&i.InvoicePayload,
		&i.MessageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByInvoicePayload = `-- name: GetPaymentByInvoicePayload :one
SELECT id, user_id, invoice_link, telegram_payment_charge_id, provider_payment_charge_id, currency, amount, status, subscription_type, invoice_payload, message_id, created_at, updated_at
FROM payments 
WHERE invoice_payload = $1
`

type GetPaymentByInvoicePayloadRow struct {
	ID                      int64
	UserID                  int64
	InvoiceLink             string
	TelegramPaymentChargeID sql.NullString
	ProviderPaymentChargeID sql.NullString
	Currency                string
	Amount                  int64
	Status                  string
	SubscriptionType        string
	InvoicePayload          sql.NullString
	MessageID               sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) GetPaymentByInvoicePayload(ctx context.Context, invoicePayload sql.NullString) (GetPaymentByInvoicePayloadRow, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByInvoicePayload, invoicePayload)
	var i GetPaymentByInvoicePayloadRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InvoiceLink,
		&i.TelegramPaymentChargeID,
		&i.ProviderPaymentChargeID,
		&i.Currency,
		&i.Amount,
		&i.Status,
		&i.SubscriptionType,
		&i.InvoicePayload,
		&i.MessageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByTelegramChargeID = `-- name: GetPaymentByTelegramChargeID :one
SELECT id, user_id, invoice_link, telegram_payment_charge_id, provider_payment_charge_id, currency, amount, status, subscription_type, invoice_payload, message_id, created_at, updated_at
FROM payments 
WHERE telegram_payment_charge_id = $1
`

type GetPaymentByTelegramChargeIDRow struct {
	ID                      int64
	UserID                  int64
	InvoiceLink             string
	TelegramPaymentChargeID sql.NullString
	ProviderPaymentChargeID sql.NullString
	Currency                string
	Amount                  int64
	Status                  string
	SubscriptionType        string
	InvoicePayload          sql.NullString
	MessageID               sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) GetPaymentByTelegramChargeID(ctx context.Context, telegramPaymentChargeID sql.NullString) (GetPaymentByTelegramChargeIDRow, error) {
	row := q.db.QueryRowContext(ctx, getPaymentByTelegramChargeID, telegramPaymentChargeID)
	var i GetPaymentByTelegramChargeIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InvoiceLink,
		&i.TelegramPaymentChargeID,
		&i.ProviderPaymentChargeID,
		&i.Currency,
		&i.Amount,
		&i.Status,
		&i.SubscriptionType,
		&i.InvoicePayload,
		&i.MessageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPendingPayments = `-- name: GetPendingPayments :many
SELECT id, user_id, invoice_link, telegram_payment_charge_id, provider_payment_charge_id, currency, amount, status, subscription_type, invoice_payload, message_id, created_at, updated_at
FROM payments 
WHERE status = 'pending' 
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetPendingPaymentsParams struct {
	Limit  int32
	Offset int32
}

type GetPendingPaymentsRow struct {
	ID                      int64
	UserID                  int64
	InvoiceLink             string
	TelegramPaymentChargeID sql.NullString
	ProviderPaymentChargeID sql.NullString
	Currency                string
	Amount                  int64
	Status                  string
	SubscriptionType        string
	InvoicePayload          sql.NullString
	MessageID               sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) GetPendingPayments(ctx context.Context, arg GetPendingPaymentsParams) ([]GetPendingPaymentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPendingPayments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPendingPaymentsRow
	for rows.Next() {
		var i GetPendingPaymentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.InvoiceLink,
			&i.TelegramPaymentChargeID,
			&i.ProviderPaymentChargeID,
			&i.Currency,
			&i.Amount,
			&i.Status,
			&i.SubscriptionType,
			&i.InvoicePayload,
			&i.MessageID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPayments = `-- name: GetUserPayments :many
SELECT id, user_id, invoice_link, telegram_payment_charge_id, provider_payment_charge_id, currency, amount, status, subscription_type, invoice_payload, message_id, created_at, updated_at
FROM payments 
WHERE user_id = $1 
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserPaymentsParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

type GetUserPaymentsRow struct {
	ID                      int64
	UserID                  int64
	InvoiceLink             string
	TelegramPaymentChargeID sql.NullString
	ProviderPaymentChargeID sql.NullString
	Currency                string
	Amount                  int64
	Status                  string
	SubscriptionType        string
	InvoicePayload          sql.NullString
	MessageID               sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) GetUserPayments(ctx context.Context, arg GetUserPaymentsParams) ([]GetUserPaymentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserPayments, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserPaymentsRow
	for rows.Next() {
		var i GetUserPaymentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.InvoiceLink,
			&i.TelegramPaymentChargeID,
			&i.ProviderPaymentChargeID,
			&i.Currency,
			&i.Amount,
			&i.Status,
			&i.SubscriptionType,
			&i.InvoicePayload,
			&i.MessageID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE payments 
SET status = $2, telegram_payment_charge_id = $3, provider_payment_charge_id = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, invoice_link, telegram_payment_charge_id, provider_payment_charge_id, currency, amount, status, subscription_type, invoice_payload, message_id, created_at, updated_at
`

type UpdatePaymentStatusParams struct {
	ID                      int64
	Status                  string
	TelegramPaymentChargeID sql.NullString
	ProviderPaymentChargeID sql.NullString
}

type UpdatePaymentStatusRow struct {
	ID                      int64
	UserID                  int64
	InvoiceLink             string
	TelegramPaymentChargeID sql.NullString
	ProviderPaymentChargeID sql.NullString
	Currency                string
	Amount                  int64
	Status                  string
	SubscriptionType        string
	InvoicePayload          sql.NullString
	MessageID               sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (UpdatePaymentStatusRow, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentStatus,
		arg.ID,
		arg.Status,
		arg.TelegramPaymentChargeID,
		arg.ProviderPaymentChargeID,
	)
	var i UpdatePaymentStatusRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InvoiceLink,
		&i.TelegramPaymentChargeID,
		&i.ProviderPaymentChargeID,
		&i.Currency,
		&i.Amount,
		&i.Status,
		&i.SubscriptionType,
		&i.InvoicePayload,
		&i.MessageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePaymentWithInvoice = `-- name: UpdatePaymentWithInvoice :one
UPDATE payments 
SET invoice_link = $2, invoice_payload = $3, message_id = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, invoice_link, telegram_payment_charge_id, provider_payment_charge_id, currency, amount, status, subscription_type, invoice_payload, message_id, created_at, updated_at
`

type UpdatePaymentWithInvoiceParams struct {
	ID             int64
	InvoiceLink    string
	InvoicePayload sql.NullString
	MessageID      sql.NullString
}

type UpdatePaymentWithInvoiceRow struct {
	ID                      int64
	UserID                  int64
	InvoiceLink             string
	TelegramPaymentChargeID sql.NullString
	ProviderPaymentChargeID sql.NullString
	Currency                string
	Amount                  int64
	Status                  string
	SubscriptionType        string
	InvoicePayload          sql.NullString
	MessageID               sql.NullString
	CreatedAt               time.Time
	UpdatedAt               time.Time
}

func (q *Queries) UpdatePaymentWithInvoice(ctx context.Context, arg UpdatePaymentWithInvoiceParams) (UpdatePaymentWithInvoiceRow, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentWithInvoice,
		arg.ID,
		arg.InvoiceLink,
		arg.InvoicePayload,
		arg.MessageID,
	)
	var i UpdatePaymentWithInvoiceRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.InvoiceLink,
		&i.TelegramPaymentChargeID,
		&i.ProviderPaymentChargeID,
		&i.Currency,
		&i.Amount,
		&i.Status,
		&i.SubscriptionType,
		&i.InvoicePayload,
		&i.MessageID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
