// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: subscriptions.sql

package generated

import (
	"context"
	"time"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (user_id, payment_id, subscription_type, valid_from, valid_to, status)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, payment_id, subscription_type, valid_from, valid_to, status, created_at, updated_at
`

type CreateSubscriptionParams struct {
	UserID           int64
	PaymentID        int64
	SubscriptionType string
	ValidFrom        time.Time
	ValidTo          time.Time
	Status           string
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.UserID,
		arg.PaymentID,
		arg.SubscriptionType,
		arg.ValidFrom,
		arg.ValidTo,
		arg.Status,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.SubscriptionType,
		&i.ValidFrom,
		&i.ValidTo,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const expireOldSubscriptions = `-- name: ExpireOldSubscriptions :exec
UPDATE subscriptions
SET status = 'expired', updated_at = NOW()
WHERE status = 'active' AND valid_to <= NOW()
`

func (q *Queries) ExpireOldSubscriptions(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, expireOldSubscriptions)
	return err
}

const getActiveSubscriptionByUserID = `-- name: GetActiveSubscriptionByUserID :one
SELECT id, user_id, payment_id, subscription_type, valid_from, valid_to, status, created_at, updated_at
FROM subscriptions
WHERE user_id = $1 AND status = 'active' AND valid_to > NOW()
ORDER BY valid_to DESC
LIMIT 1
`

func (q *Queries) GetActiveSubscriptionByUserID(ctx context.Context, userID int64) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getActiveSubscriptionByUserID, userID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.SubscriptionType,
		&i.ValidFrom,
		&i.ValidTo,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSubscriptions = `-- name: GetUserSubscriptions :many
SELECT id, user_id, payment_id, subscription_type, valid_from, valid_to, status, created_at, updated_at
FROM subscriptions
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserSubscriptionsParams struct {
	UserID int64
	Limit  int32
	Offset int32
}

func (q *Queries) GetUserSubscriptions(ctx context.Context, arg GetUserSubscriptionsParams) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getUserSubscriptions, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PaymentID,
			&i.SubscriptionType,
			&i.ValidFrom,
			&i.ValidTo,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionStatus = `-- name: UpdateSubscriptionStatus :one
UPDATE subscriptions
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, payment_id, subscription_type, valid_from, valid_to, status, created_at, updated_at
`

type UpdateSubscriptionStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) UpdateSubscriptionStatus(ctx context.Context, arg UpdateSubscriptionStatusParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionStatus, arg.ID, arg.Status)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentID,
		&i.SubscriptionType,
		&i.ValidFrom,
		&i.ValidTo,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
