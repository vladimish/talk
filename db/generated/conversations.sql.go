// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: conversations.sql

package generated

import (
	"context"
	"time"
)

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (name, user_id, created_at, updated_at)
VALUES ($1, $2, $3, $4)
RETURNING id, name, user_id, created_at, updated_at
`

type CreateConversationParams struct {
	Name      string
	UserID    int64
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation,
		arg.Name,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConversationByID = `-- name: GetConversationByID :one
SELECT id, name, user_id, created_at, updated_at FROM conversations
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetConversationByID(ctx context.Context, id int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationByID, id)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getConversationsByUserID = `-- name: GetConversationsByUserID :many
SELECT id, name, user_id, created_at, updated_at FROM conversations
WHERE user_id = $1
ORDER BY updated_at DESC
`

func (q *Queries) GetConversationsByUserID(ctx context.Context, userID int64) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, getConversationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConversationName = `-- name: UpdateConversationName :exec
UPDATE conversations
SET name = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateConversationNameParams struct {
	ID   int64
	Name string
}

func (q *Queries) UpdateConversationName(ctx context.Context, arg UpdateConversationNameParams) error {
	_, err := q.db.ExecContext(ctx, updateConversationName, arg.ID, arg.Name)
	return err
}
